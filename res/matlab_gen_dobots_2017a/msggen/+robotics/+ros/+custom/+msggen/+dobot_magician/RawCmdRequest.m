classdef RawCmdRequest < robotics.ros.Message
    %RawCmdRequest MATLAB implementation of dobot_magician/RawCmdRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dobot_magician/RawCmdRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0f735d0b085785fcbbd7b776f3faaaa8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Len
        ID
        Rw
        IsQ
        Cmd
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Cmd', 'ID', 'IsQ', 'Len', 'Rw'} % List of non-constant message properties
        ROSPropertyList = {'cmd', 'ID', 'isQ', 'len', 'rw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RawCmdRequest(msg)
            %RawCmdRequest Construct the message object RawCmdRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function len = get.Len(obj)
            %get.Len Get the value for property Len
            len = typecast(int8(obj.JavaMessage.getLen), 'uint8');
        end
        
        function set.Len(obj, len)
            %set.Len Set the value for property Len
            validateattributes(len, {'numeric'}, {'nonempty', 'scalar'}, 'RawCmdRequest', 'Len');
            
            obj.JavaMessage.setLen(len);
        end
        
        function id = get.ID(obj)
            %get.ID Get the value for property ID
            id = typecast(int8(obj.JavaMessage.getID), 'uint8');
        end
        
        function set.ID(obj, id)
            %set.ID Set the value for property ID
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'RawCmdRequest', 'ID');
            
            obj.JavaMessage.setID(id);
        end
        
        function rw = get.Rw(obj)
            %get.Rw Get the value for property Rw
            rw = typecast(int8(obj.JavaMessage.getRw), 'uint8');
        end
        
        function set.Rw(obj, rw)
            %set.Rw Set the value for property Rw
            validateattributes(rw, {'numeric'}, {'nonempty', 'scalar'}, 'RawCmdRequest', 'Rw');
            
            obj.JavaMessage.setRw(rw);
        end
        
        function isq = get.IsQ(obj)
            %get.IsQ Get the value for property IsQ
            isq = typecast(int8(obj.JavaMessage.getIsQ), 'uint8');
        end
        
        function set.IsQ(obj, isq)
            %set.IsQ Set the value for property IsQ
            validateattributes(isq, {'numeric'}, {'nonempty', 'scalar'}, 'RawCmdRequest', 'IsQ');
            
            obj.JavaMessage.setIsQ(isq);
        end
        
        function cmd = get.Cmd(obj)
            %get.Cmd Get the value for property Cmd
            cmd = char(obj.JavaMessage.getCmd);
        end
        
        function set.Cmd(obj, cmd)
            %set.Cmd Set the value for property Cmd
            validateattributes(cmd, {'char'}, {}, 'RawCmdRequest', 'Cmd');
            
            obj.JavaMessage.setCmd(cmd);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Len = obj.Len;
            cpObj.ID = obj.ID;
            cpObj.Rw = obj.Rw;
            cpObj.IsQ = obj.IsQ;
            cpObj.Cmd = obj.Cmd;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Len = strObj.Len;
            obj.ID = strObj.ID;
            obj.Rw = strObj.Rw;
            obj.IsQ = strObj.IsQ;
            obj.Cmd = strObj.Cmd;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Len = obj.Len;
            strObj.ID = obj.ID;
            strObj.Rw = obj.Rw;
            strObj.IsQ = obj.IsQ;
            strObj.Cmd = obj.Cmd;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dobot_magician.RawCmdRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dobot_magician.RawCmdRequest;
            obj.reload(strObj);
        end
    end
end
